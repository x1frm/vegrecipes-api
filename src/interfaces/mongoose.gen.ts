/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from 'mongoose';

/**
 * Lean version of RecipeIngredientItemDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `RecipeIngredientDocument.toObject()`.
 * ```
 * const recipeingredientObject = recipeingredient.toObject();
 * ```
 */
export interface RecipeIngredientItem {
  name: string;
  availableInDixy?: boolean;
  price?: number;
  ingredientType?: string[];
  _id: mongoose.Types.ObjectId;
}

/**
 * Lean version of RecipeIngredientDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `RecipeDocument.toObject()`.
 * ```
 * const recipeObject = recipe.toObject();
 * ```
 */
export interface RecipeIngredient {
  item?: RecipeIngredientItem;
  amount?: number;
  _id: mongoose.Types.ObjectId;
}

/**
 * Lean version of RecipeEquipmentDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `RecipeDocument.toObject()`.
 * ```
 * const recipeObject = recipe.toObject();
 * ```
 */
export interface RecipeEquipment {
  name?: string;
  _id: mongoose.Types.ObjectId;
}

/**
 * Lean version of RecipeDocument (type alias of `Recipe`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Recipe } from "../models"
 * import { RecipeObject } from "../interfaces/mongoose.gen.ts"
 *
 * const recipeObject: RecipeObject = recipe.toObject();
 * ```
 */
export type RecipeObject = Recipe;

/**
 * Mongoose Method types
 *
 * Use type assertion to ensure Recipe methods type safety:
 * ```
 * RecipeSchema.methods = <RecipeMethods>{ ... };
 * ```
 */
export type RecipeMethods = {};

/**
 * Mongoose Static types
 *
 * Use type assertion to ensure Recipe statics type safety:
 * ```
 * RecipeSchema.statics = <RecipeStatics>{ ... };
 * ```
 */
export type RecipeStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Recipe = mongoose.model<RecipeDocument, RecipeModel>("Recipe", RecipeSchema);
 * ```
 */
export interface RecipeModel extends mongoose.Model<RecipeDocument>, RecipeStatics {}

/**
 * Mongoose Schema type
 *
 * Assign this type to new Recipe schema instances:
 * ```
 * const RecipeSchema: RecipeSchema = new mongoose.Schema({ ... })
 * ```
 */
export type RecipeSchema = mongoose.Schema<RecipeDocument, RecipeModel>;

/**
 * Lean version of RecipeDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `RecipeDocument.toObject()`. To avoid conflicts with model names, use the type alias `RecipeObject`.
 * ```
 * const recipeObject = recipe.toObject();
 * ```
 */
export interface Recipe {
  name?: string;
  description?: string;
  ingredients: RecipeIngredient[];
  time?: number;
  nutrition: {
    fat?: number;
    protein?: number;
    carbohydrates?: number;
  };
  dishType?: string[];
  equipment: RecipeEquipment[];
  _id: mongoose.Types.ObjectId;
}

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const RecipeIngredient = mongoose.model<RecipeIngredientDocument, RecipeIngredientModel>("RecipeIngredient", RecipeIngredientSchema);
 * ```
 */
export interface RecipeIngredientItemDocument
  extends mongoose.Document<mongoose.Types.ObjectId>,
    RecipeIngredientItemMethods {
  name: string;
  availableInDixy?: boolean;
  price?: number;
  ingredientType?: mongoose.Types.Array<string>;
  _id: mongoose.Types.ObjectId;
}

/**
 * Mongoose Embedded Document type
 *
 * Type of `RecipeDocument["ingredients"]` element.
 */
export interface RecipeIngredientDocument extends mongoose.Types.EmbeddedDocument {
  item?: RecipeIngredientItemDocument;
  amount?: number;
  _id: mongoose.Types.ObjectId;
}

/**
 * Mongoose Embedded Document type
 *
 * Type of `RecipeDocument["equipment"]` element.
 */
export interface RecipeEquipmentDocument extends mongoose.Types.EmbeddedDocument {
  name?: string;
  _id: mongoose.Types.ObjectId;
}

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Recipe = mongoose.model<RecipeDocument, RecipeModel>("Recipe", RecipeSchema);
 * ```
 */
export interface RecipeDocument extends mongoose.Document<mongoose.Types.ObjectId>, RecipeMethods {
  name?: string;
  description?: string;
  ingredients: mongoose.Types.DocumentArray<RecipeIngredientDocument>;
  time?: number;
  nutrition: {
    fat?: number;
    protein?: number;
    carbohydrates?: number;
  };
  dishType?: mongoose.Types.Array<string>;
  equipment: mongoose.Types.DocumentArray<RecipeEquipmentDocument>;
  _id: mongoose.Types.ObjectId;
}
